package trabalhofinal.persistencia;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import trabalhofinal.negocio.Chale;
import trabalhofinal.negocio.Cliente;
import trabalhofinal.negocio.Hospedagem;

public class HospedagemDAOImp implements HospedagemDAO {
	@Override
	public String inserir(Hospedagem hos) {
		String sql = "insert into cliente(codCliente,rgCliente,enderecoCliente,bairroCliente,cidadeCliente,estadoCliente,CEPCliente,nascimentoCliente)values (?,?,?,?,?,?,?,?)";
		Connection con = ConnectionFactory.getConnection();
		try {
			PreparedStatement pst = con.prepareStatement(sql);
			pst.setInt(1, hos.getCodHospedagem());
			pst.setString(2, hos.getEstado());
			pst.setTimestamp(3, hos.getDataInicio());
			pst.setTimestamp(4, hos.getDataFim());
			pst.setInt(5, hos.getQtdPessoas());
			pst.setFloat(6, hos.getDesconto());
			pst.setDouble(7, hos.getValorFinal());
			pst.setInt(8, hos.getCodCliente().getCodCliente());
			pst.setInt(9, hos.getCodChale().getCodChale());
			int res = pst.executeUpdate();
			if (res > 0) {
				return "Inserido com sucesso.";
			} else {
				return "Erro ao inserir.";
			}
		} catch (SQLException e) {
			return e.getMessage();
		} finally {
			ConnectionFactory.close(con);
		}
	}

	@Override
	public String alterar(Hospedagem hos) {
		String sql = "update cliente set rgCliente=?,enderecoCliente=?,bairroCliente=?,cidadeCliente=?,estadoCliente=?,CEPCliente=?,nascimentoCliente=? where codCliente=?";
		Connection con = ConnectionFactory.getConnection();
		try {
			PreparedStatement pst = con.prepareStatement(sql);
			pst.setInt(1, hos.getCodHospedagem());
			pst.setString(2, hos.getEstado());
			pst.setTimestamp(3, hos.getDataInicio());
			pst.setTimestamp(4, hos.getDataFim());
			pst.setInt(5, hos.getQtdPessoas());
			pst.setFloat(6, hos.getDesconto());
			pst.setDouble(7, hos.getValorFinal());
			pst.setInt(8, hos.getCodCliente().getCodCliente());
			pst.setInt(9, hos.getCodChale().getCodChale());
			int res = pst.executeUpdate();
			if (res > 0) {
				return "Alterado com sucesso.";
			} else {
				return "Erro ao alterar.";
			}
		} catch (SQLException e) {
			return e.getMessage();
		} finally {
			ConnectionFactory.close(con);
		}
	}

	@Override
	public String excluir(Hospedagem hos) {
		String sql = "delete from cliente where codCliente=?";
		Connection con = ConnectionFactory.getConnection();
		try {
			PreparedStatement pst = con.prepareStatement(sql);
			pst.setInt(1, hos.getCodHospedagem());
			int res = pst.executeUpdate();
			if (res > 0) {
				return "Exclu√≠do com sucesso.";
			} else {
				return "Erro ao excluir.";
			}
		} catch (SQLException e) {
			return e.getMessage();
		} finally {
			ConnectionFactory.close(con);
		}
	}

	@Override
	public List<Hospedagem> listarTodos() {
		String sql = "select * from cliente";
		Connection con = ConnectionFactory.getConnection();
		List<Hospedagem> lista = new ArrayList<>();
		try {
			PreparedStatement pst = con.prepareStatement(sql);
			ResultSet rs = pst.executeQuery();
			if (rs != null) {
				while (rs.next()) {
					Hospedagem ep = new Hospedagem();
					ep.setCodHospedagem(rs.getInt(1));
					ep.setEstado(rs.getString(2));
					ep.setDataInicio(rs.getTimestamp(3));
					ep.setDataFim(rs.getTimestamp(4));
					ep.setQtdPessoas(rs.getInt(5));
					ep.setDesconto(rs.getFloat(6));
					ep.setValorFinal(rs.getDouble(7));
					Cliente cliente = new Cliente();
					cliente.setCodCliente(rs.getInt(8));
					ep.setCodCliente(cliente);
					Chale chale = new Chale();
					chale.setCodChale(rs.getInt(9));
					ep.setCodChale(chale);
					lista.add(ep);
				}
				return lista;
			} else {
				return null;
			}
		} catch (SQLException e) {
			return null;
		} finally {
			ConnectionFactory.close(con);
		}
	}

	@Override
	public Cliente pesquisarPorCodHospedagem(int hospedagem) {
		String sql = "select * from cliente where codCliente=?";
		Connection con = ConnectionFactory.getConnection();
		try {
			PreparedStatement pst = con.prepareStatement(sql);
			pst.setInt(1, codHospedagem);
			ResultSet rs = pst.executeQuery();
			if (rs.next()) {
				Cliente ep = new Cliente();
				ep.setCodCliente(rs.getInt(1));
				ep.setRgCliente(rs.getString(2));
				ep.setEnderecoCliente(rs.getString(3));
				ep.setBairroCliente(rs.getString(4));
				ep.setCidadeCliente(rs.getString(5));
				ep.setEstadoCliente(rs.getString(6));
				ep.setCepCliente(rs.getString(7));
				ep.setNascimentoCliente(rs.getDate(8));
				return ep;
			} else {
				return null;
			}
		} catch (SQLException e) {
			return null;
		} finally {
			ConnectionFactory.close(con);
		}
	}
}